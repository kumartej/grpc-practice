// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	PrimeFactorization(ctx context.Context, in *PrimeFactorizationRequest, opts ...grpc.CallOption) (CalculatorService_PrimeFactorizationClient, error)
	Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error)
	CurrentMax(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_CurrentMaxClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/calculator.calculatorService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeFactorization(ctx context.Context, in *PrimeFactorizationRequest, opts ...grpc.CallOption) (CalculatorService_PrimeFactorizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculator.calculatorService/PrimeFactorization", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeFactorizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeFactorizationClient interface {
	Recv() (*PrimeNumber, error)
	grpc.ClientStream
}

type calculatorServicePrimeFactorizationClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeFactorizationClient) Recv() (*PrimeNumber, error) {
	m := new(PrimeNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculator.calculatorService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceAverageClient{stream}
	return x, nil
}

type CalculatorService_AverageClient interface {
	Send(*IntegerRequest) error
	CloseAndRecv() (*DoubleResponse, error)
	grpc.ClientStream
}

type calculatorServiceAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceAverageClient) Send(m *IntegerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceAverageClient) CloseAndRecv() (*DoubleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DoubleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) CurrentMax(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_CurrentMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/calculator.calculatorService/CurrentMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceCurrentMaxClient{stream}
	return x, nil
}

type CalculatorService_CurrentMaxClient interface {
	Send(*IntegerRequest) error
	Recv() (*IntegerResponse, error)
	grpc.ClientStream
}

type calculatorServiceCurrentMaxClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceCurrentMaxClient) Send(m *IntegerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceCurrentMaxClient) Recv() (*IntegerResponse, error) {
	m := new(IntegerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	PrimeFactorization(*PrimeFactorizationRequest, CalculatorService_PrimeFactorizationServer) error
	Average(CalculatorService_AverageServer) error
	CurrentMax(CalculatorService_CurrentMaxServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculatorServiceServer) PrimeFactorization(*PrimeFactorizationRequest, CalculatorService_PrimeFactorizationServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeFactorization not implemented")
}
func (UnimplementedCalculatorServiceServer) Average(CalculatorService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedCalculatorServiceServer) CurrentMax(CalculatorService_CurrentMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrentMax not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.calculatorService/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeFactorization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeFactorizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeFactorization(m, &calculatorServicePrimeFactorizationServer{stream})
}

type CalculatorService_PrimeFactorizationServer interface {
	Send(*PrimeNumber) error
	grpc.ServerStream
}

type calculatorServicePrimeFactorizationServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeFactorizationServer) Send(m *PrimeNumber) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Average(&calculatorServiceAverageServer{stream})
}

type CalculatorService_AverageServer interface {
	SendAndClose(*DoubleResponse) error
	Recv() (*IntegerRequest, error)
	grpc.ServerStream
}

type calculatorServiceAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceAverageServer) SendAndClose(m *DoubleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceAverageServer) Recv() (*IntegerRequest, error) {
	m := new(IntegerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_CurrentMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).CurrentMax(&calculatorServiceCurrentMaxServer{stream})
}

type CalculatorService_CurrentMaxServer interface {
	Send(*IntegerResponse) error
	Recv() (*IntegerRequest, error)
	grpc.ServerStream
}

type calculatorServiceCurrentMaxServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceCurrentMaxServer) Send(m *IntegerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceCurrentMaxServer) Recv() (*IntegerRequest, error) {
	m := new(IntegerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.calculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _CalculatorService_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeFactorization",
			Handler:       _CalculatorService_PrimeFactorization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CalculatorService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CurrentMax",
			Handler:       _CalculatorService_CurrentMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
